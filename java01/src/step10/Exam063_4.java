/* 스태틱 메서드와 인스턴스 메서드 -
변수의 접근


*/
package step10;

import java.util.Scanner;

 public class Exam063_4 {
  static class Mytype {
   static int a;
   int b;


    static void m1() {
      System.out.println("스태틱 메서드 호출...");
      Mytype.a = 100; // OK, 스태틱 메서드에서 스태틱 변수에 접근 가능.
      a = 200; // OK, 스태틱 메서드와 같은 클래스 안에 있다면 클래스 이름을 생략할 수 있다.


      // this.b = 300; // 컴파일 오류. 스태틱 메서드는 내장 변수 this가 없다.
                    // 인스턴스 주소 없이 호출하기 떄문에 내장 변수 없다.
      // b = 400; // 컴파일 오류, 인스턴스 주소도 없이 변수에 접근 불가
    // 스태틱 메서드(블록)에서는 오직! 스태틱 멤버만 사용 가능.
    }

     void m2() {
      System.out.println("인스턴스 메서드 호출..");
   Mytype.a = 500; // OK, 스태틱변수는 클래스 이름만 있다면 언제 어디서든 접근 가능.
   a = 600; // OK, 변수 앞에 주소를 안주면 다음 순서로 변수를 찾음.
            // 로컬 변수인지 알아보고 아니면 this(인스턴스)로 찾고 아니면
            // 클래스 이름(스태틱 변수)으로 찾는다. 코드의 가독성을 높이기 위해 정확하게
            // 클래스 이름을 지정하라.
  this.b = 700; // OK 인스턴스 메서드는 인스턴스 주소를 담고 있는 내장 변수 this가 있다.
  b = 800; // OK 변수 앞에 주소를 생략하면 다음순서로 로컬변수인지 찾고, 인스턴스인지, 스태틱 변수인지
          // 즉 b가 인스턴스 변수라면 b = 800;은 다음 코드로 바뀐다. this.b = 800;
          // 실무에서는 주소없는걸 많이 보게 될거임.

    // 결론
    // 인스턴스 메서드는 공유 변수인 스태틱 변수에 언제든지 접근할 수 있따.
    // 그리고 인스턴스 변수에 접근 가능.
    }
  }


   public static void main(String[] args) {



}
}





/*
#




*/
